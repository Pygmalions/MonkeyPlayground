//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem/MonkeyInputSet.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MonkeyInputSet: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MonkeyInputSet()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MonkeyInputSet"",
    ""maps"": [
        {
            ""name"": ""Monkey"",
            ""id"": ""067fe78b-0ce6-4127-85b3-db776c0c21cd"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c0f83e20-d59a-4523-8757-a12f449c551e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""eeb2068e-3f4b-4030-9d6c-fa91df4c0d2a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a07ffbd1-5468-445b-a249-9e39ad96c71c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""df95864b-ae30-48a3-ba2c-123b61870ac2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""284b0fe0-fdbf-4c63-bf09-78ea048022ca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c993e3c-cb6a-478f-9e49-6f41bfc9f9fc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Monkey
        m_Monkey = asset.FindActionMap("Monkey", throwIfNotFound: true);
        m_Monkey_Movement = m_Monkey.FindAction("Movement", throwIfNotFound: true);
    }

    ~@MonkeyInputSet()
    {
        UnityEngine.Debug.Assert(!m_Monkey.enabled, "This will cause a leak and performance issues, MonkeyInputSet.Monkey.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Monkey
    private readonly InputActionMap m_Monkey;
    private List<IMonkeyActions> m_MonkeyActionsCallbackInterfaces = new List<IMonkeyActions>();
    private readonly InputAction m_Monkey_Movement;
    public struct MonkeyActions
    {
        private @MonkeyInputSet m_Wrapper;
        public MonkeyActions(@MonkeyInputSet wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Monkey_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Monkey; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MonkeyActions set) { return set.Get(); }
        public void AddCallbacks(IMonkeyActions instance)
        {
            if (instance == null || m_Wrapper.m_MonkeyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MonkeyActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IMonkeyActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IMonkeyActions instance)
        {
            if (m_Wrapper.m_MonkeyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMonkeyActions instance)
        {
            foreach (var item in m_Wrapper.m_MonkeyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MonkeyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MonkeyActions @Monkey => new MonkeyActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IMonkeyActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
